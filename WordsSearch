class Solution {
    int[][] dirs = {{-1,0},{1,0},{0,-1},{0,1}};
    public boolean exist(char[][] board, String word) {
        
        int m = board.length;
        int n = board[0].length;
        boolean[][] visited = new boolean[m][n];
        for(int i =0; i<m; i++){
            for(int j =0; j<n; j++){
                if(dfs(board,word,i,j,m,n,visited))return true;
            }
        }
        return false;
    }
    public boolean dfs(char[][] board, String word, int i, int j,int m, int n, boolean[][] visited){
        //base
        if(i <0 || i>=m || j <0 || j>=n || visited[i][j]){
            return false;
        }       

        if(board[i][j] == word.charAt(0)){
            if(word.length() == 1){
                return true;
            }
            for(int[] dir: dirs){
                int r = dir[0]+i;
                int c = dir[1]+j;
                visited[i][j] = true;
                if(dfs(board,word.substring(1),r,c,m,n,visited))return true;
                visited[i][j] = false;
            }
        }
        return false;
    }
}